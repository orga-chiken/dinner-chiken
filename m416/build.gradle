buildscript {
	ext {
		springBootVersion = '1.4.3.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

group = 'com.convertlab'
version = 'latest'
sourceCompatibility = 1.8

def env = System.getProperty("env") ? System.getProperty("env") : "test"

repositories {

	mavenCentral()
}

configurations {
    mybatisGenerator
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('joda-time:joda-time')
    compile('org.apache.commons:commons-lang3:3.5')
    compile('mysql:mysql-connector-java:5.1.34')
    compile('com.google.guava:guava:21.0')
    compile('org.slf4j:slf4j-api:1.7.16')
//    compile('org.slf4j:log4j-over-slf4j:1.7.16')
    compile('ch.qos.logback:logback-classic:1.2.3')
    compile('org.json:json')
    compile('com.fasterxml.jackson.datatype:jackson-datatype-joda')
    compile('net.logstash.logback:logstash-logback-encoder:4.7')

    compile('org.mybatis:mybatis:3.2.8')
    compile('org.mybatis.caches:mybatis-ehcache:1.0.3')
    compile('org.mybatis:mybatis-spring:1.2.2')

    compile('tk.mybatis:mapper:3.5.3') {
        exclude module: 'persistence-api'
    }
//    compile('org.hibernate.hibernate-jpa-2.0-api:1.0.1.Final')
    compile('javax.servlet:javax.servlet-api:3.1.0')

    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.2'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.36'
    mybatisGenerator 'tk.mybatis:mapper:3.3.2'
    mybatisGenerator 'tk.mybatis:mapper-spring-boot-starter:1.1.3'



    testCompile('org.springframework.boot:spring-boot-starter-test')


    def getDbProperties = {
        def properties = new Properties()
        file("src/main/resources/db-mysql.properties").withInputStream { inputStream ->
            properties.load(inputStream)
        }
        properties
    }

    task mybatisGenerate << {
        def properties = getDbProperties()
        ant.properties['targetProject'] = projectDir.path
        ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
        ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
        ant.properties['userId'] = properties.getProperty("jdbc.user")
        ant.properties['password'] = properties.getProperty("jdbc.pass")
        ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
        ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
        ant.properties['modelPackage'] = "com.convertlab.beans.entity"
        ant.properties['mapperPackage'] = "com.convertlab.beans.mapper"
        ant.properties['sqlMapperPackage'] = "mybatis_mapper"
        ant.taskdef(
                name: 'mbgenerator',
                classname: 'org.mybatis.generator.ant.GeneratorAntTask',
                classpath: configurations.mybatisGenerator.asPath
        )
        ant.mbgenerator(overwrite: true,
                configfile: 'src/main/resources/generatorConfig.xml', verbose: true) {
            propertyset {
                propertyref(name: 'targetProject')
                propertyref(name: 'userId')
                propertyref(name: 'driverClass')
                propertyref(name: 'connectionURL')
                propertyref(name: 'password')
                propertyref(name: 'src_main_java')
                propertyref(name: 'src_main_resources')
                propertyref(name: 'modelPackage')
                propertyref(name: 'mapperPackage')
                propertyref(name: 'sqlMapperPackage')
            }
        }
    }

}


