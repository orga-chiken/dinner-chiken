
pipeline {
  agent any
  stages {
    stage('build') {
      steps {
        sh '''./gradlew clean
        ./gradlew bootRepackage'''
      }
    }

    stage ('def impage_path for release') {
      when {
        branch 'release'
      }
      steps {
          script {
          def userInput = input(
          id: 'userInput', message: 'Please input the version of this release?', parameters: [
          [$class: 'TextParameterDefinition', defaultValue: '0.0.0', description: 'version of the release', name: 'version']
          ])
          def gitURLcommand = 'git config --local remote.origin.url'
          gitURL = sh(returnStdout: true, script: gitURLcommand).trim()
          repoName = gitURL.split('/')[-1].split('\\.')[0]
          jarName = "${repoName}-latest.jar"
          echo jarName
          def branch2env = [master: 'test', validation: 'validation', release: 'prod']
          IMAGE_PATH = "nexus-release.xsio.cn/${branch2env[env.BRANCH_NAME]}/${repoName}-${repoName}:${userInput}"
          echo IMAGE_PATH
          IMAGE_PUB = "nexus-public.xsio.cn/${branch2env[env.BRANCH_NAME]}/${repoName}-${repoName}:${userInput}"
          echo IMAGE_PUB
          }
      }
    }
    stage('def impage_path for master&validation') {
      when {
        expression {
          env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'validation'
        } 
      }
      steps {
        echo env.BRANCH_NAME
        echo GIT_COMMIT
        script {
          def gitURLcommand = 'git config --local remote.origin.url'
          gitURL = sh(returnStdout: true, script: gitURLcommand).trim()
          repoName = gitURL.split('/')[-1].split('\\.')[0]
          jarName = "${repoName}-latest.jar"
          echo jarName
          def branch2env = [master: 'test', validation: 'validation', release: 'prod']
          IMAGE_PATH = "nexus-snapshot.xsio.cn/${branch2env[env.BRANCH_NAME]}/${repoName}-${repoName}:$GIT_COMMIT"
          echo IMAGE_PATH
          IMAGE_PUB = "nexus-public.xsio.cn/${branch2env[env.BRANCH_NAME]}/${repoName}-${repoName}:$GIT_COMMIT"
          echo IMAGE_PUB
        } 
      }
    }
    stage ('docker') {
      steps {
        sh "docker build --build-arg jar=${jarName} -t ${IMAGE_PATH} ."
        sh "docker push ${IMAGE_PATH}"
        sh "docker rmi ${IMAGE_PATH} || echo"
      }
    }
    stage ('deploy for test environment') {
      when {
                branch 'master'
            }
      steps {
        echo IMAGE_PUB
        script {
          def TARGETS = [env.T01, env.T04]
          for (int i = 0; i < TARGETS.size(); ++i) {
            echo "pull image in ${TARGETS[i]} server"
            sh "ssh ${TARGETS[i]} docker pull ${IMAGE_PUB}"
          } 
        }
      }
    }
    stage ('deploy for validation environment') {
      when {
                branch 'validation'
            }
      steps {
        echo IMAGE_PUB
        script {
          def TARGETS = [env.V01, env.V04]
          for (int i = 0; i < TARGETS.size(); ++i) {
            echo "pull image in ${TARGETS[i]} server"
            sh "ssh ${TARGETS[i]} docker pull ${IMAGE_PUB}"
          } 
        }
      }
    }
    stage ('deploy for prod environment') {
      when {
                branch 'release'
            }
      steps {
        echo IMAGE_PUB
        timeout(time: 1, unit: 'MINUTES') {
               input 'Should I Deploy?'
            }
        script {
          def TARGETS = [env.P01, env.P04]
          for (int i = 0; i < TARGETS.size(); ++i) {
            echo "pull image in ${TARGETS[i]} server"
            sh "ssh ${TARGETS[i]} docker pull ${IMAGE_PUB}"
          } 
        }
      }
    }
  }
}
